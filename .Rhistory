# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
corpus <- tm_map(corpus, PlainTextDocument)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier <- as.matrix(pacifier_DTM)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1]
pacifier_m[1][3]
pacifier_m
pacifier_m$Terms
pacifier_m[1,4]
pacifier_m[4,4]
pacifier_m[4:3,4]
pacifier_m[4:10,4]
pacifier_m[4:10,4:10]
pacifier_m[1:20,1:10]
pacifier_m[1:20,1:200]
pacifier_m[1:200,1:200]
pacifier_m[1:200,1:1319]
pacifier_m[1:200,1:400]
pacifier_m[1:200,'baby']
pacifier_TDM <- TermDocumentMatrix(cleaner_pacifier_corp)
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1:200,'baby']
pacifier_m[1:200,'acceptable']
pacifier_m[1:200,'baby']
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, PlainTextDocument)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1:200,'baby']
pacifier_DTM
tf <- TermDocFreq(dtm = dtm)
findFreqTerms(pacifier_DTM)
findFreqTerms(pacifier_DTM, 100, 1000)
library(topicmodels)
tf <- TermDocFreq(dtm = dtm)
#tf <- TermDocFreq(dtm = dtm)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM,k = 2, control = list(seed = 1234))
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
#tf <- TermDocFreq(dtm = dtm)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM,k = 2, control = list(seed = 1234))
tf <- termFreq(pacifier_DTM)
tf <- termFreq(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_most_frequent, k = 2, control = list(seed = 1234))
pacifier_most_frequent
typeof(pacifier_most_frequent)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_most_frequent, k = 2, control = list(seed = 1234))
pacifier_LDA
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(seed = 1234))
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)$terms
pacifier_most_frequent
pacifier_most_frequent
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
pacifier_most_frequent
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(alpha = 0.1))
install.packages('textminR')
install.packages('textmineR')
tf <- TermDocFreq(dtm = pacifier_DTM)
library(textmineR)
tf <- TermDocFreq(dtm = pacifier_DTM)
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tm)
library(tidytext)
library(qdap)
library(topicmodels)
library(textmineR)
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
mean(cleaned_microwave$helpful_votes)
median(nchar(as.character(cleaned_microwave$review_body)))
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.95, as.numeric(helpful_votes) >= 1)
cleaned_pacifier_review <- cleaned_pacifier %>% rename(doc_id=product_id,text=review_body)
head(cleaned_pacifier_review)
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, PlainTextDocument)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
pacifier_most_frequent
tf <- TermDocFreq(dtm = pacifier_DTM)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(alpha = 0.1))
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tm)
library(tidytext)
library(qdap)
library(topicmodels)
library(textmineR)
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
mean(cleaned_microwave$helpful_votes)
median(nchar(as.character(cleaned_microwave$review_body)))
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.95, as.numeric(helpful_votes) >= 1)
cleaned_pacifier_review <- cleaned_pacifier %>% rename(doc_id=product_id,text=review_body)
head(cleaned_pacifier_review)
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, PlainTextDocument)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_DTM$dimnames$Terms
rowTotals <- apply(pacifier_DTM , 1, sum) #Find the sum of words in each Document
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_DTM$dimnames$Terms
rowTotals <- apply(pacifier_DTM , 1, sum) #Find the sum of words in each Document
pacifier_DTM.new <- pacifier_DTM[rowTotals> 0, ]           #remove all docs without words
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM.new, k = 2, control = list(alpha = 0.1))
pacifier_LDA
pacifier_LDA <- LDA(pacifier_DTM.new, k = 30, control = list(seed=1234))
perplexity(pacifier_LDA)
pacifier_LDA <- LDA(pacifier_DTM.new, k = 50, control = list(seed=1234))
perplexity(pacifier_LDA)
pacifier_LDA <- LDA(pacifier_DTM.new, k = 70, control = list(seed=1234))
perplexity(pacifier_LDA)
m$k
dtm <- CreateDtm(doc_vec = cleaned_pacifier$review_body, # character vector of documents
doc_names = cleaned_pacifier$product_id, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("en"), # stopwords from tm
stopwords::stopwords(source = "smart")), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = FALSE, # Turn off status bar for this demo
cpus = 2) # default is all available cpus on the system
library(textmineR)
library(lambda.r)
dtm <- CreateDtm(doc_vec = cleaned_pacifier$review_body, # character vector of documents
doc_names = cleaned_pacifier$product_id, # document names
ngram_window = c(1, 2), # minimum and maximum n-gram length
stopword_vec = c(stopwords::stopwords("en"), # stopwords from tm
stopwords::stopwords(source = "smart")), # this is the default value
lower = TRUE, # lowercase - this is the default value
remove_punctuation = TRUE, # punctuation - this is the default
remove_numbers = TRUE, # numbers - this is the default
verbose = FALSE, # Turn off status bar for this demo
cpus = 2) # default is all available cpus on the system
dtm <- dtm[,colSums(dtm) > 2]
m <- FitLdaModel(dtm = dtm, k = 2, iterations = 500)
m$k
names(m)
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
library(ggplot2)
library(tidyverse)
library(dplyr)
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=50, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=50, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
### pacifier models
logReg_P1 <- glm(data=refined_pacifier, verified_purchase~log(helpful_votes)+star_rating+year,family=binomial(link="logit"))
summary(logReg_P1)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tm)
library(tidytext)
library(qdap)
library('sentimentr')
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
mean(cleaned_microwave$helpful_votes)
median(nchar(as.character(cleaned_microwave$review_body)))
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_hair_dryer <- filter(cleaned_hair_dryer, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
cleaned_pacifier_review <- cleaned_pacifier %>% select(product_id, review_body) %>% rename(doc_id=product_id,text=review_body)
cleaned_microwave_review <- cleaned_microwave %>% select(product_id, review_body) %>% rename(doc_id=product_id,text=review_body)
cleaned_hair_dryer_review <- cleaned_hair_dryer %>% select(product_id, review_body) %>% rename(doc_id=product_id,text=review_body)
### Finding product features based on frequency of most common words
### Remove all generic descriptions, may add/remove some descriptions
### Consider only single word frequency
pacifier_text_df <- tibble(line=1:18939, text=as.character(cleaned_pacifier_review$text))
pacifier_text_freq <- (pacifier_text_df %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>% count(word, sort=TRUE)
%>% filter(word!='pacifier', word!='pacifiers', word!='product',word!= 'baby',word!= 'love',
word!= 'loves',word!= 'bought',word!= '2',word!= '34',word!='recommend',
word!='perfect',word!='nice',word!='3',word!='month',word!='months',word!='buy',
word!='br',word!='perfect',word!='quality',word!='mouth'))
pacifier_text_freq[1:20,]
microwave_text_df <- tibble(line=1:1615, text=as.character(cleaned_microwave_review$text))
microwave_text_freq <- (microwave_text_df %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>% count(word, sort=TRUE)
%>% filter(word!='microwave', word!='microwaves', word!='product',word!= 'baby',word!= 'love',
word!= 'loves',word!= 'bought',word!='perfect',word!='ge',word!='nice',
word!= '2',word!= '34',word!='recommend',word!='br',word!='buy',word!='model'
))
microwave_text_freq[1:20,]
hair_dryer_text_df <- tibble(line=1:11470, text=as.character(cleaned_hair_dryer_review$text))
hair_dryer_text_freq <- (hair_dryer_text_df %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>% count(word, sort=TRUE)
%>% filter(word!='hair',word!='dryer',word!='dry',word!='drying',word!='dries',
word!='hairdryer', word!='product',word!= 'baby',word!= 'love',
word!= 'loves',word!= 'bought',word!='perfect',word!='ge',word!='nice',
word!= '2',word!= '34',word!='recommend',word!='br',word!='buy',word!='month',
word!='months',word!='buy',word!='br',word!='perfect',word!='quality'
))
hair_dryer_text_freq[1:20,]
microwave_text_df <- tibble(line=1:1615, text=as.character(cleaned_microwave_review$text))
microwave_text_freq <- (microwave_text_df %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>% count(word, sort=TRUE)
%>% filter(word!='microwave', word!='microwaves', word!='product',word!= 'baby',word!= 'love',
word!= 'loves',word!= 'bought',word!='perfect',word!='ge',word!='nice',
word!= '2',word!= '34',word!='recommend',word!='br',word!='buy',word!='model'
))
microwave_text_freq[1:20,]
hair_dryer_text_df <- tibble(line=1:11470, text=as.character(cleaned_hair_dryer_review$text))
hair_dryer_text_freq <- (hair_dryer_text_df %>% unnest_tokens(word, text) %>% anti_join(stop_words) %>% count(word, sort=TRUE)
%>% filter(word!='hair',word!='dryer',word!='dry',word!='drying',word!='dries',
word!='hairdryer', word!='product',word!= 'baby',word!= 'love',
word!= 'loves',word!= 'bought',word!='perfect',word!='ge',word!='nice',
word!= '2',word!= '34',word!='recommend',word!='br',word!='buy',word!='month',
word!='months',word!='buy',word!='br',word!='perfect',word!='quality'
))
hair_dryer_text_freq[1:20,]
sentiment_pacifier_review_file <- write.csv(sentiment_pacifier_review,"Problem_C_Data/sentiment_pacifier_review.csv", row.names = FALSE)
sentiment_pacifier_review <- cbind(cleaned_pacifier, sentiment_by(get_sentences(as.character(cleaned_pacifier_review$text))))
sentiment_microwave_review <- cbind(cleaned_microwave, sentiment_by(get_sentences(as.character(cleaned_microwave_review$text))))
sentiment_hair_dryer_review <- cbind(cleaned_hair_dryer, sentiment_by(get_sentences(as.character(cleaned_hair_dryer_review$text))))
View(sentiment_hair_dryer_review)
View(sentiment_microwave_review)
View(sentiment_pacifier_review)
