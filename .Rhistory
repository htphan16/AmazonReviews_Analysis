# Strip whitespace
corpus <- tm_map(corpus, replace_contraction)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tm)
library(tidytext)
library(qdap)
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
mean(cleaned_microwave$helpful_votes)
median(nchar(as.character(cleaned_microwave$review_body)))
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.95, as.numeric(helpful_votes) >= 1)
cleaned_pacifier_review <- cleaned_pacifier %>% rename(doc_id=product_id,text=review_body)
head(cleaned_pacifier_review)
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(cleaned_pacifier_corpus, replace_contraction)
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Transform to lower case
# corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
# corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
corpus <- tm_map(corpus, PlainTextDocument)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
#corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
#corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
cleaner_pacified_corp <- cleaner_pacified_corpus(as.factor(cleaned_pacifier_corpus[1:20]))
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map.VCorpus(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, PlainTextDocument)
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
corpus <- tm_map(corpus, PlainTextDocument)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
### Alter the function code to match the instructions
cleaner_pacified_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:20])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
cleaner_pacified_corp <- cleaner_pacified_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacified_corp)[[2]]
cleaner_pacified_corp
pacified_DTM <- DocumentTermMatrix(cleaner_pacified_corp)
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction
corpus <- tm_map(corpus, replace_contraction)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier <- as.matrix(pacifier_DTM)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1]
pacifier_m[1][3]
pacifier_m
pacifier_m$Terms
pacifier_m[1,4]
pacifier_m[4,4]
pacifier_m[4:3,4]
pacifier_m[4:10,4]
pacifier_m[4:10,4:10]
pacifier_m[1:20,1:10]
pacifier_m[1:20,1:200]
pacifier_m[1:200,1:200]
pacifier_m[1:200,1:1319]
pacifier_m[1:200,1:400]
pacifier_m[1:200,'baby']
pacifier_TDM <- TermDocumentMatrix(cleaner_pacifier_corp)
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
# Transform to lower case
#corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, PlainTextDocument)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1:200,'baby']
pacifier_m[1:200,'acceptable']
pacifier_m[1:200,'baby']
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, PlainTextDocument)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus[1:200])
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_m <- as.matrix(pacifier_DTM)
pacifier_m[1:200,'baby']
pacifier_DTM
tf <- TermDocFreq(dtm = dtm)
findFreqTerms(pacifier_DTM)
findFreqTerms(pacifier_DTM, 100, 1000)
library(topicmodels)
tf <- TermDocFreq(dtm = dtm)
#tf <- TermDocFreq(dtm = dtm)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM,k = 2, control = list(seed = 1234))
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
#tf <- TermDocFreq(dtm = dtm)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM,k = 2, control = list(seed = 1234))
tf <- termFreq(pacifier_DTM)
tf <- termFreq(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_most_frequent, k = 2, control = list(seed = 1234))
pacifier_most_frequent
typeof(pacifier_most_frequent)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_most_frequent, k = 2, control = list(seed = 1234))
pacifier_LDA
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(seed = 1234))
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)$terms
pacifier_most_frequent
pacifier_most_frequent
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
pacifier_most_frequent
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(alpha = 0.1))
install.packages('textminR')
install.packages('textmineR')
tf <- TermDocFreq(dtm = pacifier_DTM)
library(textmineR)
tf <- TermDocFreq(dtm = pacifier_DTM)
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(tm)
library(tidytext)
library(qdap)
library(topicmodels)
library(textmineR)
cleaned_pacifier <- read.csv("Problem_C_Data/cleaned_pacifier.tsv")
cleaned_microwave <- read.csv("Problem_C_Data/cleaned_microwave.tsv")
cleaned_hair_dryer <- read.csv("Problem_C_Data/cleaned_hair_dryer.tsv")
mean(cleaned_microwave$helpful_votes)
median(nchar(as.character(cleaned_microwave$review_body)))
refined_pacifier <- filter(cleaned_pacifier, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.98, as.numeric(helpful_votes) >= 1)
refined_microwave <- filter(cleaned_microwave, nchar(as.character(review_body))>=150, as.numeric(helpful_votes/total_votes) > 0.95, as.numeric(helpful_votes) >= 1)
cleaned_pacifier_review <- cleaned_pacifier %>% rename(doc_id=product_id,text=review_body)
head(cleaned_pacifier_review)
cleaned_pacifier_corpus <- VCorpus(DataframeSource(cleaned_pacifier_review))
cleaned_pacifier_corpus
### Alter the function code to match the instructions
cleaner_pacifier_corpus <- function(corpus) {
# Replace contraction, number
corpus <- tm_map(corpus, replace_contraction)
corpus <- tm_map(corpus, replace_number)
# Remove punctuation
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, PlainTextDocument)
# Transform to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# Add more stopwords
corpus <- tm_map(corpus, removeWords, words = c(stopwords("en")))
# Strip whitespace
corpus <- tm_map(corpus, stripWhitespace)
# Remove numbers
corpus <- tm_map(corpus, removeNumbers)
return(corpus)
}
cleaner_pacifier_corp <- cleaner_pacifier_corpus(cleaned_pacifier_corpus)
content(cleaner_pacifier_corp)[[2]]
cleaner_pacifier_corp
pacifier_DTM <- DocumentTermMatrix(cleaner_pacifier_corp)
pacifier_most_frequent <- findMostFreqTerms(pacifier_DTM)
pacifier_most_frequent
tf <- TermDocFreq(dtm = pacifier_DTM)
#original_tf <- tf %>% select(term, term_freq,doc_freq)
#rownames(original_tf) <- 1:nrow(original_tf)
#### findFreqTerms(pacifier_DTM, 100, 1000)
# set a seed so that the output of the model is predictable
pacifier_LDA <- LDA(pacifier_DTM, k = 2, control = list(alpha = 0.1))
